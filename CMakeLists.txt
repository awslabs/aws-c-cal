# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0.

cmake_minimum_required(VERSION 3.0)
project(aws-c-cal LANGUAGES C VERSION 0.1.0)

if (POLICY CMP0069)
    cmake_policy(SET CMP0069 NEW) # Enable LTO/IPO if available in the compiler, see AwsCFlags
endif()

option(BYO_CRYPTO "Set this if you want to provide your own cryptography implementation. This will cause the defaults to not be compiled." OFF)
option(USE_OPENSSL "Set this if you want to use your system's OpenSSL 1.0.2/1.1.1 compatible libcrypto" OFF)

if (DEFINED CMAKE_PREFIX_PATH)
    file(TO_CMAKE_PATH "${CMAKE_PREFIX_PATH}" CMAKE_PREFIX_PATH)
endif()

if (DEFINED CMAKE_INSTALL_PREFIX)
    file(TO_CMAKE_PATH "${CMAKE_INSTALL_PREFIX}" CMAKE_INSTALL_PREFIX)
endif()

if (UNIX AND NOT APPLE)
    include(GNUInstallDirs)
elseif(NOT DEFINED CMAKE_INSTALL_LIBDIR)
    set(CMAKE_INSTALL_LIBDIR "lib")
endif()

# This is required in order to append /lib/cmake to each element in CMAKE_PREFIX_PATH
set(AWS_MODULE_DIR "/${CMAKE_INSTALL_LIBDIR}/cmake")
string(REPLACE ";" "${AWS_MODULE_DIR};" AWS_MODULE_PATH "${CMAKE_PREFIX_PATH}${AWS_MODULE_DIR}")
# Append that generated list to the module search path
list(APPEND CMAKE_MODULE_PATH ${AWS_MODULE_PATH})
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/modules")

include(AwsCFlags)
include(AwsCheckHeaders)
include(AwsSharedLibSetup)
include(AwsSanitizers)
include(AwsFindPackage)

file(GLOB AWS_CAL_HEADERS
        "include/aws/cal/*.h"
)

file(GLOB AWS_CAL_SRC
        "source/*.c"
)

if (WIN32)

    if (NOT BYO_CRYPTO)
        file(GLOB AWS_CAL_OS_SRC
            "source/windows/*.c"
        )
        if (AWS_SUPPORT_WIN7)
            set(PLATFORM_LIBS BCrypt)
        else()
            set(PLATFORM_LIBS NCrypt)
        endif()
    endif()

    if (MSVC)
        source_group("Header Files\\aws\\cal" FILES ${AWS_CAL_HEADERS})
        source_group("Source Files" FILES ${AWS_CAL_SRC})
        source_group("Source Files\\windows" FILES ${AWS_CAL_OS_SRC})
    endif ()

elseif (APPLE)
    if (NOT BYO_CRYPTO)
        file(GLOB AWS_CAL_OS_SRC
        "source/darwin/*.c"
        )

        find_library(SECURITY_LIB Security)
        if (NOT SECURITY_LIB)
           message(FATAL_ERROR "Security Framework not found")
        endif ()

        list(APPEND PLATFORM_LIBS "-framework Security")
    endif()
else ()
    if (NOT BYO_CRYPTO)
        file(GLOB AWS_CAL_OS_SRC
            "source/unix/*.c"
        )
        if (USE_OPENSSL AND NOT ANDROID)
            find_package(OpenSSL REQUIRED)
            find_package(Threads REQUIRED)
            add_library(crypto UNKNOWN IMPORTED)
            set_target_properties(crypto PROPERTIES
                INTERFACE_INCLUDE_DIRECTORIES "${OPENSSL_INCLUDE_DIR}")
            set_target_properties(crypto PROPERTIES
                IMPORTED_LINK_INTERFACE_LANGUAGES "C"
                IMPORTED_LOCATION "${OPENSSL_CRYPTO_LIBRARY}")
            add_dependencies(crypto Threads::Threads)
            message(STATUS "Using libcrypto from system: ${OPENSSL_CRYPTO_LIBRARY}")
        elseif(NOT USE_OPENSSL AND IN_SOURCE_BUILD)
            if (TARGET crypto)
                message(STATUS "Using libcrypto from AWS-LC")
            else()
                message(FATAL_ERROR "Target crypto is not defined, failed to find libcrypto.")
            endif()
        else()
            find_package(LibCrypto REQUIRED)
            message(STATUS "Using automatic libcrypto: ${LibCrypto_LIBRARY}")
        endif()
        set(PLATFORM_LIBS crypto dl)
    endif()
endif()

file(GLOB CAL_HEADERS
        ${AWS_CAL_HEADERS}
)

file(GLOB CAL_SRC
        ${AWS_CAL_SRC}
        ${AWS_CAL_OS_SRC}
)

add_library(${PROJECT_NAME} ${CAL_SRC})
aws_set_common_properties(${PROJECT_NAME} NO_WEXTRA)
aws_prepare_symbol_visibility_args(${PROJECT_NAME} "AWS_CAL")
aws_add_sanitizers(${PROJECT_NAME} BLACKLIST "sanitizer-blacklist.txt")

aws_use_package(aws-c-common)
target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_AWS_LIBS} ${PLATFORM_LIBS})

if (BYO_CRYPTO)
    target_compile_definitions(${PROJECT_NAME} PRIVATE -DBYO_CRYPTO)
elseif (NOT WIN32 AND NOT APPLE)
    target_include_directories(${PROJECT_NAME} PRIVATE $<TARGET_PROPERTY:crypto,INTERFACE_INCLUDE_DIRECTORIES>)
endif()

# Our ABI is not yet stable
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION 1.0.0)

target_include_directories(${PROJECT_NAME} PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>)
# When we install, the generated header will be at the INSTALL_INTERFACE:include location,
# but at build time we need to explicitly include this here
target_include_directories(${PROJECT_NAME} PUBLIC
        $<BUILD_INTERFACE:${GENERATED_INCLUDE_DIR}>)

aws_prepare_shared_lib_exports(${PROJECT_NAME})

configure_file("cmake/${PROJECT_NAME}-config.cmake"
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
  @ONLY)

aws_check_headers(${PROJECT_NAME} ${AWS_CAL_HEADERS})
install(FILES ${AWS_CAL_HEADERS} DESTINATION "include/aws/cal" COMPONENT Development)

if (BUILD_SHARED_LIBS)
   set (TARGET_DIR "shared")
else()
   set (TARGET_DIR "static")
endif()

install(EXPORT "${PROJECT_NAME}-targets"
    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/${TARGET_DIR}/"
    NAMESPACE AWS::
    COMPONENT Development)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake"
    COMPONENT Development)

list(APPEND EXPORT_MODULES
    "cmake/modules/FindLibCrypto.cmake"
    )

install(FILES ${EXPORT_MODULES}
        DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/modules"
        COMPONENT Development)

if (NOT CMAKE_CROSSCOMPILING AND NOT BYO_CRYPTO)
    include(CTest)
    if (BUILD_TESTING)
        add_subdirectory(bin/sha256_profile)
        add_subdirectory(tests)
    endif()
endif()
